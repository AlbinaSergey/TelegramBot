#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Migration script from SQLite to PostgreSQL
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
"""

import sqlite3
import psycopg2
import json
import os
from datetime import datetime

class DatabaseMigrator:
    def __init__(self, sqlite_path, postgres_config):
        self.sqlite_path = sqlite_path
        self.postgres_config = postgres_config
        
    def get_postgresql_schema(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ SQLite —Å—Ö–µ–º—ã –≤ PostgreSQL"""
        return """
-- HelpDesk System Database Schema for PostgreSQL
-- –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram

-- users: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Ö –≤ Telegram –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ telegram_id
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  telegram_id BIGINT UNIQUE NOT NULL,
  username TEXT,
  role TEXT NOT NULL CHECK(role IN ('admin','executor','branch_user')),
  password_hash TEXT,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- branches: —Ñ–∏–ª–∏–∞–ª—ã –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
CREATE TABLE IF NOT EXISTS branches (
  id SERIAL PRIMARY KEY,
  code TEXT UNIQUE NOT NULL,   -- —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ (F‚ÄëKAZ, –ì–û–†–û–î‚Äë12)
  name TEXT NOT NULL,
  city TEXT,
  is_active BOOLEAN NOT NULL DEFAULT TRUE
);

-- cartridge types (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π)
CREATE TABLE IF NOT EXISTS cartridge_types (
  id SERIAL PRIMARY KEY,
  sku TEXT UNIQUE NOT NULL,
  name TEXT NOT NULL
);

-- —Å–∫–ª–∞–¥: –æ—Å—Ç–∞—Ç–∫–∏ –∏ —Å–ø–∏—Å–∞–Ω–∏—è
CREATE TABLE IF NOT EXISTS stock_items (
  id SERIAL PRIMARY KEY,
  branch_id INTEGER NOT NULL REFERENCES branches(id),
  cartridge_type_id INTEGER NOT NULL REFERENCES cartridge_types(id),
  quantity INTEGER NOT NULL DEFAULT 0,
  UNIQUE(branch_id, cartridge_type_id)
);

-- –∑–∞—è–≤–∫–∏ (orders/tickets)
CREATE TABLE IF NOT EXISTS requests (
  id SERIAL PRIMARY KEY,
  request_code TEXT UNIQUE NOT NULL,
  branch_id INTEGER NOT NULL REFERENCES branches(id),
  user_id INTEGER NOT NULL REFERENCES users(id),
  priority TEXT NOT NULL CHECK(priority IN ('low','normal','high')),
  status TEXT NOT NULL DEFAULT 'new',  -- new, in_progress, done, cancelled, archived
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  assigned_executor_id INTEGER REFERENCES users(id),
  sla_notified_at TIMESTAMP,
  completed_at TIMESTAMP
);

-- —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞—è–≤–∫–∏ (–∑–∞–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂)
CREATE TABLE IF NOT EXISTS request_items (
  id SERIAL PRIMARY KEY,
  request_id INTEGER NOT NULL REFERENCES requests(id) ON DELETE CASCADE,
  cartridge_type_id INTEGER NOT NULL REFERENCES cartridge_types(id),
  quantity INTEGER NOT NULL CHECK(quantity>0)
);

-- –∞—É–¥–∏—Ç-–¥–Ω–µ–≤–Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
CREATE TABLE IF NOT EXISTS logs (
  id SERIAL PRIMARY KEY,
  request_id INTEGER NOT NULL REFERENCES requests(id) ON DELETE CASCADE,
  user_id INTEGER REFERENCES users(id),
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  action TEXT NOT NULL,        -- e.g. 'created', 'status_changed', 'assigned'
  from_status TEXT,
  to_status TEXT,
  note TEXT
);

-- –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–° (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
-- —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞—è–≤–∫–∏
CREATE TABLE IF NOT EXISTS one_c_snapshot (
  id SERIAL PRIMARY KEY,
  request_id INTEGER NOT NULL REFERENCES requests(id) ON DELETE CASCADE,
  branch_id INTEGER NOT NULL REFERENCES branches(id),
  taken_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  snapshot_json JSONB
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
CREATE INDEX IF NOT EXISTS idx_branches_code ON branches(code);
CREATE INDEX IF NOT EXISTS idx_cartridge_types_sku ON cartridge_types(sku);
CREATE INDEX IF NOT EXISTS idx_stock_items_branch ON stock_items(branch_id);
CREATE INDEX IF NOT EXISTS idx_stock_items_cartridge ON stock_items(cartridge_type_id);
CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status);
CREATE INDEX IF NOT EXISTS idx_requests_branch ON requests(branch_id);
CREATE INDEX IF NOT EXISTS idx_requests_user ON requests(user_id);
CREATE INDEX IF NOT EXISTS idx_requests_executor ON requests(assigned_executor_id);
CREATE INDEX IF NOT EXISTS idx_requests_created_at ON requests(created_at);
CREATE INDEX IF NOT EXISTS idx_request_items_request ON request_items(request_id);
CREATE INDEX IF NOT EXISTS idx_logs_request ON logs(request_id);
CREATE INDEX IF NOT EXISTS idx_logs_timestamp ON logs(timestamp);
"""

    def migrate_data(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ SQLite –≤ PostgreSQL...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        sqlite_conn = sqlite3.connect(self.sqlite_path)
        sqlite_conn.row_factory = sqlite3.Row  # –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫
        
        pg_conn = psycopg2.connect(**self.postgres_config)
        pg_cursor = pg_conn.cursor()
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ PostgreSQL
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL...")
            pg_cursor.execute(self.get_postgresql_schema())
            pg_conn.commit()
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
            tables_order = [
                'branches',
                'cartridge_types', 
                'users',
                'stock_items',
                'requests',
                'request_items',
                'logs',
                'one_c_snapshot'
            ]
            
            for table in tables_order:
                self.migrate_table(sqlite_conn, pg_cursor, table)
                pg_conn.commit()
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
            print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            pg_conn.rollback()
            
        finally:
            sqlite_conn.close()
            pg_conn.close()
    
    def migrate_table(self, sqlite_conn, pg_cursor, table_name):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
        sqlite_cursor = sqlite_conn.cursor()
        sqlite_cursor.execute(f"SELECT * FROM {table_name}")
        rows = sqlite_cursor.fetchall()
        
        if not rows:
            print(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫ (–∏—Å–∫–ª—é—á–∞—è id –¥–ª—è SERIAL)
        columns = [description[0] for description in sqlite_cursor.description]
        columns_without_id = [col for col in columns if col != 'id']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        placeholders = ', '.join(['%s'] * len(columns_without_id))
        columns_str = ', '.join(columns_without_id)
        
        insert_query = f"""
            INSERT INTO {table_name} ({columns_str}) 
            VALUES ({placeholders})
            ON CONFLICT DO NOTHING
        """
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        data_to_insert = []
        for row in rows:
            row_data = []
            for col in columns_without_id:
                value = row[col]
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è JSON –ø–æ–ª–µ–π
                if table_name == 'one_c_snapshot' and col == 'snapshot_json':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º JSON
                    if value:
                        try:
                            json.loads(value)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
                        except:
                            value = json.dumps({"raw_data": value})
                
                row_data.append(value)
            
            data_to_insert.append(tuple(row_data))
        
        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        pg_cursor.executemany(insert_query, data_to_insert)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è SERIAL –ø–æ–ª–µ–π
        pg_cursor.execute(f"""
            SELECT setval(pg_get_serial_sequence('{table_name}', 'id'), 
                         COALESCE(MAX(id), 1)) 
            FROM {table_name}
        """)
        
        print(f"üìä {table_name}: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data_to_insert)} –∑–∞–ø–∏—Å–µ–π")

def load_postgres_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PostgreSQL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return {
        'host': os.getenv('PG_HOST', 'localhost'),
        'port': os.getenv('PG_PORT', '5432'),
        'database': os.getenv('PG_DATABASE', 'helpdesk'),
        'user': os.getenv('PG_USER', 'helpdesk_user'),
        'password': os.getenv('PG_PASSWORD', 'helpdesk_password')
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    sqlite_path = os.getenv('SQLITE_PATH', 'database/helpdesk.db')
    postgres_config = load_postgres_config()
    
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
    print(f"   SQLite: {sqlite_path}")
    print(f"   PostgreSQL: {postgres_config['user']}@{postgres_config['host']}:{postgres_config['port']}/{postgres_config['database']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è SQLite —Ñ–∞–π–ª–∞
    if not os.path.exists(sqlite_path):
        print(f"‚ùå SQLite —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sqlite_path}")
        return
    
    migrator = DatabaseMigrator(sqlite_path, postgres_config)
    migrator.migrate_data()

if __name__ == "__main__":
    main()