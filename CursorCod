# -*- coding: utf-8 -*-

import telebot

import logging

import time

from datetime import datetime

import os

from telebot import types

import csv

from openpyxl import Workbook, load_workbook

from openpyxl.utils import get_column_letter

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery



# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

TOKEN = '8290189832:AAFsaDcb2cxWRrbZKzgIBl4I6LE2hDd3tyk'

ADMIN_ID = 541707424



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

logging.basicConfig(

    format="%(asctime)s %(levelname)s %(message)s", 

    level=logging.INFO,

    handlers=[

        logging.FileHandler('bot.log', encoding='utf-8'),

        logging.StreamHandler()

    ]

)

telebot.logger.setLevel(logging.INFO)



# –î–∞–Ω–Ω—ã–µ

CARTRIDGES = [

    "CE285", "CE278", "CB435", "CB436", "Q2612", "Q5949", "Q7553",

    "CF283", "106R03623", "101R00555", "CE505", "B235000", "D115L",

    "TL-420", "DL-420", "TK-475", "E30"

]



QUANTITIES = [f"{n} —à—Ç" for n in range(1, 31)]



CITIES = {

    "–•–∞–Ω—Ç—ã‚Äë–ú–∞–Ω—Å–∏–π—Å–∫": [

        "–•–∞–Ω—Ç—ã‚Äë–ú–∞–Ω—Å–∏–π—Å–∫ ‚Äî –º–µ–¥–∏–∫–æ‚Äë–∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",

        "–•–∞–Ω—Ç—ã‚Äë–ú–∞–Ω—Å–∏–π—Å–∫ ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞",

        "–•–∞–Ω—Ç—ã‚Äë–ú–∞–Ω—Å–∏–π—Å–∫ ‚Äî –±–∏–æ–ª–æ–≥–∏—è –∏ —Ü–∏—Ç–æ–ª–æ–≥–∏—è",

        "–•–∞–Ω—Ç—ã‚Äë–ú–∞–Ω—Å–∏–π—Å–∫ ‚Äî –≥–∏—Å—Ç–æ–ª–æ–≥–∏—è",

        "–•–∞–Ω—Ç—ã‚Äë–ú–∞–Ω—Å–∏–π—Å–∫ ‚Äî –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",

        "–•–∞–Ω—Ç—ã‚Äë–ú–∞–Ω—Å–∏–π—Å–∫ ‚Äî —Ö–∏–º–∏–∫–æ‚Äë—Ç–æ–∫—Å–∏–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",

        "–ê–ø–ø–∞—Ä–∞—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",

        "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è",

        "–ö–∞–¥—Ä–æ–≤–æ‚Äë–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª",

        "–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è —Å–ª—É–∂–±–∞",

        "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ‚Äë–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª",

        "–û—Ç–¥–µ–ª –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ‚Äë—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–Ω–∞–±–∂–µ–Ω–∏—è",

        "–û—Ç–¥–µ–ª –ø–æ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",

        "–ü–ª–∞–Ω–æ–≤–æ‚Äë—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª",

        "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª"

    ],

    "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫": [

        "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫ ‚Äî —Ö–∏–º–∏–∫–æ‚Äë—Ç–æ–∫—Å–∏–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",

        "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫ ‚Äî –≥–∏—Å—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"

    ],

    "–°—É—Ä–≥—É—Ç": ["–°—É—Ä–≥—É—Ç ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞"],

    "–õ–∞–Ω–≥–µ–ø–∞—Å": [], "–†–∞–¥—É–∂–Ω—ã–π": [], "–ü—Ä–∏–æ–±—å–µ": [],

    "–ë–µ–ª–æ—è—Ä—Å–∫–∏–π": [], "–ë–µ—Ä—ë–∑–æ–≤–æ": [], "–ú–µ–∂–¥—É—Ä–µ—á–µ–Ω—Å–∫–∏–π": [],

    "–ù—è–≥–∞–Ω—å": [], "–°–æ–≤–µ—Ç—Å–∫–∏–π": [], "–£—Ä–∞–π": [],

    "–Æ–≥–æ—Ä—Å–∫": [], "–ö–æ–Ω–¥–∏–Ω—Å–∫–æ–µ": [], "–ò–≥—Ä–∏–º": []

}



EQUIP_PROBLEMS = {

    "–ü—Ä–∏–Ω—Ç–µ—Ä": ["–ù–µ –ø–µ—á–∞—Ç–∞–µ—Ç", "–ó–∞–º—è—Ç–∏–µ –±—É–º–∞–≥–∏", "–ì–æ—Ä–∏—Ç –æ—à–∏–±–∫–∞", "–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è"],

    "–ú–§–£": ["–ù–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç", "–ù–µ –∫–æ–ø–∏—Ä—É–µ—Ç", "–ù–µ –ø–µ—á–∞—Ç–∞–µ—Ç", "–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è"],

    "–ö–æ–º–ø—å—é—Ç–µ—Ä": ["–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è", "–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω", "–®—É–º–∏—Ç", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"],

    "–ú–æ–Ω–∏—Ç–æ—Ä": ["–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è", "–ú–µ—Ä—Ü–∞–µ—Ç", "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–∫–∞–∂–µ–Ω–∏—è"]

}



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

bot = telebot.TeleBot(TOKEN)

user_data = {}

bot_running = False



def generate_request_id():

    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏"""

    counter_file = "counter.txt"

    if not os.path.exists(counter_file):

        with open(counter_file, "w") as f:

            f.write("1")

    with open(counter_file, "r+") as f:

        current = int(f.read())

        f.seek(0)

        f.write(str(current + 1))

    return f"REQ-{current:04d}"



def clear_user_data(chat_id):

    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    if chat_id in user_data:

        del user_data[chat_id]



def show_type_selection(chat_id, include_welcome=False):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏"""

    markup = InlineKeyboardMarkup()

    markup.add(

        InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π", callback_data="type_cartridge"),

        InlineKeyboardButton("üîß –†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", callback_data="type_repair")

    )

    if include_welcome:

        message = "ü§ñ –ë–æ—Ç –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–∫–∞–∑ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:"

    else:

        message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:"

    bot.send_message(chat_id, message, reply_markup=markup)


def start_flow(chat_id):

    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞"""

    clear_user_data(chat_id)

    user_data[chat_id] = {"step": "start"}

    show_type_selection(chat_id, include_welcome=True)



@bot.callback_query_handler(func=lambda call: call.data in ["type_cartridge", "type_repair"])

def handle_type_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    if call.data == "type_cartridge":

        user_data[chat_id]["type"] = "üì¶ –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π"

        user_data[chat_id]["step"] = "cartridge"

        bot.edit_message_text("–í—ã–±—Ä–∞–Ω —Ç–∏–ø: üì¶ –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π", chat_id, call.message.message_id)

        ask_cartridge_inline(chat_id)

    elif call.data == "type_repair":

        user_data[chat_id]["type"] = "üîß –†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"

        user_data[chat_id]["step"] = "equipment"

        bot.edit_message_text("–í—ã–±—Ä–∞–Ω —Ç–∏–ø: üîß –†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", chat_id, call.message.message_id)

        ask_equipment_inline(chat_id)

    bot.answer_callback_query(call.id)



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞)

def ask_cartridge_inline(chat_id):

    user_data[chat_id]["step"] = "cartridge"

    markup = InlineKeyboardMarkup(row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π –ø–æ 2 –≤ —Ä—è–¥—É –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    buttons = [InlineKeyboardButton(c, callback_data=f"cartridge_{c}") for c in CARTRIDGES]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.row(buttons[i], buttons[i + 1])
        else:
            markup.row(buttons[i])

    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂:", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("cartridge_"))

def handle_cartridge_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    cartridge = call.data.split("cartridge_",1)[1]

    user_data[chat_id]["cartridge"] = cartridge

    user_data[chat_id]["step"] = "quantity"

    bot.edit_message_text(f"–í—ã–±—Ä–∞–Ω –∫–∞—Ä—Ç—Ä–∏–¥–∂: {cartridge}", chat_id, call.message.message_id)

    ask_quantity_inline(chat_id)

    bot.answer_callback_query(call.id)



def ask_quantity_inline(chat_id):

    user_data[chat_id]["step"] = "quantity"

    markup = InlineKeyboardMarkup(row_width=4)

    for q in QUANTITIES:

        markup.add(InlineKeyboardButton(q, callback_data=f"qty_{q}"))

    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    bot.send_message(chat_id, f"–ö–∞—Ä—Ç—Ä–∏–¥–∂: {user_data[chat_id]['cartridge']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("qty_"))

def handle_quantity_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    qty = call.data.split("qty_",1)[1]

    user_data[chat_id]["quantity"] = qty

    user_data[chat_id]["step"] = "city"

    bot.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}", chat_id, call.message.message_id)

    ask_city_inline(chat_id)

    bot.answer_callback_query(call.id)



def ask_city_inline(chat_id):

    user_data[chat_id]["step"] = "city"

    markup = InlineKeyboardMarkup(row_width=2)

    for city in CITIES:

        markup.add(InlineKeyboardButton(city, callback_data=f"city_{city}"))

    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("city_"))

def handle_city_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    city = call.data.split("city_",1)[1]

    user_data[chat_id]["city"] = city

    subs = CITIES[city]

    if subs:

        user_data[chat_id]["step"] = "subbranch"

        markup = InlineKeyboardMarkup(row_width=2)

        for s in subs:

            markup.add(InlineKeyboardButton(s, callback_data=f"sub_{s}"))

        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

        bot.edit_message_text(f"–ì–æ—Ä–æ–¥: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", chat_id, call.message.message_id, reply_markup=markup)

    else:

        user_data[chat_id]["branch"] = city

        bot.edit_message_text(f"–ì–æ—Ä–æ–¥: {city}", chat_id, call.message.message_id)

        finalize_request(chat_id)

    bot.answer_callback_query(call.id)



@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_"))

def handle_subbranch_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    sub = call.data.split("sub_",1)[1]

    user_data[chat_id]["branch"] = sub

    bot.edit_message_text(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {sub}", chat_id, call.message.message_id)

    finalize_request(chat_id)

    bot.answer_callback_query(call.id)



@bot.callback_query_handler(func=lambda call: call.data == "cancel")

def handle_cancel_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    bot.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id, call.message.message_id)

    start_flow(chat_id)

    bot.answer_callback_query(call.id)



def ask_equipment_inline(chat_id):

    user_data[chat_id]["step"] = "equipment"

    markup = InlineKeyboardMarkup(row_width=2)

    for e in EQUIP_PROBLEMS:

        markup.add(InlineKeyboardButton(e, callback_data=f"equipment_{e}"))

    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("equipment_"))

def handle_equipment_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    equipment = call.data.split("equipment_",1)[1]

    user_data[chat_id]["equipment"] = equipment

    user_data[chat_id]["step"] = "problem"

    bot.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment}", chat_id, call.message.message_id)

    ask_problem_inline(chat_id)

    bot.answer_callback_query(call.id)



def ask_problem_inline(chat_id):

    user_data[chat_id]["step"] = "problem"

    markup = InlineKeyboardMarkup(row_width=2)

    for p in EQUIP_PROBLEMS[user_data[chat_id]['equipment']]:

        markup.add(InlineKeyboardButton(p, callback_data=f"problem_{p}"))

    markup.add(InlineKeyboardButton("–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data="custom_problem"))

    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    bot.send_message(chat_id, f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {user_data[chat_id]['equipment']}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("problem_"))

def handle_problem_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    problem = call.data.split("problem_",1)[1]

    user_data[chat_id]["problem"] = problem

    user_data[chat_id]["step"] = "city"

    bot.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {problem}", chat_id, call.message.message_id)

    ask_city_inline(chat_id)

    bot.answer_callback_query(call.id)



@bot.callback_query_handler(func=lambda call: call.data == "custom_problem")

def handle_custom_problem_inline(call: CallbackQuery):

    chat_id = call.message.chat.id

    user_data[chat_id]["step"] = "custom_problem"

    bot.edit_message_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤—Ä—É—á–Ω—É—é:", chat_id, call.message.message_id)

    bot.answer_callback_query(call.id)



def ask_custom_problem_inline(chat_id):

    user_data[chat_id]["step"] = "custom_problem"

    bot.send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤—Ä—É—á–Ω—É—é:")



def ask_city(chat_id):

    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""

    user_data[chat_id]["step"] = "city"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    markup.add("‚ùå –û—Ç–º–µ–Ω–∞")

    for city in CITIES:

        markup.add(city)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)



def ask_subbranch(chat_id, city):

    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""

    user_data[chat_id]["step"] = "subbranch"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    markup.add("‚ùå –û—Ç–º–µ–Ω–∞")

    for s in CITIES[city]:

        markup.add(s)

    bot.send_message(chat_id, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤ {city}:", reply_markup=markup)



def save_request_to_excel(req_id, status, request_data):

    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Excel (requests.xlsx) —Å —Ä—É—Å—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""

    headers = [

        '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏', '–°—Ç–∞—Ç—É—Å', '–¢–∏–ø', '–ö–∞—Ä—Ç—Ä–∏–¥–∂', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–ü—Ä–æ–±–ª–µ–º–∞', '–ì–æ—Ä–æ–¥', '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–î–∞—Ç–∞'

    ]

    filename = 'requests.xlsx'

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ

    data = {

        '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏': req_id,

        '–°—Ç–∞—Ç—É—Å': status,

        '–¢–∏–ø': '',

        '–ö–∞—Ä—Ç—Ä–∏–¥–∂': '',

        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': '',

        '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': '',

        '–ü—Ä–æ–±–ª–µ–º–∞': '',

        '–ì–æ—Ä–æ–¥': '',

        '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': '',

        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': '',

        '–î–∞—Ç–∞': ''

    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ summary

    for line in request_data.split('\n'):

        if line.startswith('–¢–∏–ø:'):

            data['–¢–∏–ø'] = line.split(':',1)[1].strip()

        elif line.startswith('–ö–∞—Ä—Ç—Ä–∏–¥–∂:'):

            data['–ö–∞—Ä—Ç—Ä–∏–¥–∂'] = line.split(':',1)[1].strip()

        elif line.startswith('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:'):

            data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = line.split(':',1)[1].strip()

        elif line.startswith('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:'):

            data['–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'] = line.split(':',1)[1].strip()

        elif line.startswith('–ü—Ä–æ–±–ª–µ–º–∞:'):

            data['–ü—Ä–æ–±–ª–µ–º–∞'] = line.split(':',1)[1].strip()

        elif line.startswith('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:'):

            data['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'] = line.split(':',1)[1].strip()

        elif line.startswith('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:'):

            data['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'] = line.split(':',1)[1].strip()

        elif line.startswith('üïí') or line.startswith('–î–∞—Ç–∞:'):

            data['–î–∞—Ç–∞'] = line.split(':',1)[1].strip() if ':' in line else line.strip()

        elif line.startswith('–ì–æ—Ä–æ–¥:'):

            data['–ì–æ—Ä–æ–¥'] = line.split(':',1)[1].strip()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª

    try:

        if os.path.exists(filename):

            wb = load_workbook(filename)

            ws = wb.active

        else:

            wb = Workbook()

            ws = wb.active

            ws.append(headers)

        ws.append([data[h] for h in headers])

        wb.save(filename)

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Excel: {e}")



def save_request_to_file(request_data, status='new', req_id=None):

    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ñ–∞–π–ª, CSV –∏ Excel"""

    try:

        with open('requests.txt', 'a', encoding='utf-8') as f:

            f.write(f"{request_data}\n–°—Ç–∞—Ç—É—Å: {status}\n{'='*50}\n")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV

        with open('requests.csv', 'a', encoding='utf-8', newline='') as csvfile:

            writer = csv.writer(csvfile)

            writer.writerow([req_id or '', status, request_data.replace('\n', ' | ')])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel

        save_request_to_excel(req_id or '', status, request_data)

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ñ–∞–π–ª: {e}")



def finalize_request(chat_id):

    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë"""

    try:

        typ = user_data[chat_id]['type']

        rid = generate_request_id()

        ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏

        summary = f"‚úâÔ∏è *–ó–∞—è–≤–∫–∞ {rid}*\nüïí {ts}\n–¢–∏–ø: {typ}\n"

        

        if typ == "üì¶ –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π":

            summary += f"–ö–∞—Ä—Ç—Ä–∏–¥–∂: {user_data[chat_id]['cartridge']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data[chat_id]['quantity']}\n"

        else:

            summary += f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {user_data[chat_id]['equipment']}\n–ü—Ä–æ–±–ª–µ–º–∞: {user_data[chat_id]['problem']}\n"

        

        summary += f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {user_data[chat_id]['branch']}\n"

        summary += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{bot.get_chat(chat_id).username or bot.get_chat(chat_id).first_name}"

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ —Ñ–∞–π–ª

        save_request_to_file(summary, status='new', req_id=rid)

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        bot.send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

        bot.send_message(ADMIN_ID, summary, parse_mode='Markdown')

        

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É

        logging.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {rid} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

        

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")

        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    finally:

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É

        clear_user_data(chat_id)

        start_flow(chat_id)



def update_request_status(req_id, new_status):

    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ requests.txt –∏ requests.csv"""

    updated = False

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ

    if os.path.exists('requests.txt'):

        with open('requests.txt', 'r', encoding='utf-8') as f:

            lines = f.readlines()

        with open('requests.txt', 'w', encoding='utf-8') as f:

            i = 0

            while i < len(lines):

                if req_id in lines[i]:

                    # –ù–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ –∑–∞—è–≤–∫–∏

                    while i < len(lines) and not lines[i].startswith('–°—Ç–∞—Ç—É—Å:'):

                        f.write(lines[i])

                        i += 1

                    if i < len(lines) and lines[i].startswith('–°—Ç–∞—Ç—É—Å:'):

                        f.write(f'–°—Ç–∞—Ç—É—Å: {new_status}\n')

                        updated = True

                        i += 1

                    else:

                        f.write(f'–°—Ç–∞—Ç—É—Å: {new_status}\n')

                    # –ö–æ–ø–∏—Ä—É–µ–º –¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è

                    while i < len(lines) and not lines[i].startswith('='):

                        f.write(lines[i])

                        i += 1

                else:

                    f.write(lines[i])

                    i += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ CSV

    if os.path.exists('requests.csv'):

        with open('requests.csv', 'r', encoding='utf-8') as f:

            rows = list(csv.reader(f))

        with open('requests.csv', 'w', encoding='utf-8', newline='') as f:

            writer = csv.writer(f)

            for row in rows:

                if row and row[0] == req_id:

                    row[1] = new_status

                    updated = True

                writer.writerow(row)

    return updated



def notify_user_about_status(req_id, new_status):

    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""

    if os.path.exists('requests.txt'):

        with open('requests.txt', 'r', encoding='utf-8') as f:

            lines = f.readlines()

        user_id = None

        found = False

        req = []

        for line in lines:

            if req_id in line:

                found = True

                req = [line]

            elif found and line.startswith('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:'):

                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)

                if '@' in line:

                    # username

                    user_id = line.split('@',1)[1].strip()

                else:

                    # –≤–æ–∑–º–æ–∂–Ω–æ, –∏–º—è –∏–ª–∏ id

                    user_id = line.split(':',1)[1].strip()

                break

            elif found:

                req.append(line)

        if user_id:

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ username –∏–ª–∏ id)

            try:

                msg = f'üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ {req_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_status}'

                # –ï—Å–ª–∏ user_id ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ, –∑–Ω–∞—á–∏—Ç id

                if user_id.isdigit():

                    bot.send_message(int(user_id), msg)

                else:

                    bot.send_message(f'@{user_id}', msg)

            except Exception as e:

                logging.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}')



@bot.message_handler(commands=['start'])

def cmd_start(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    start_flow(m.chat.id)



@bot.message_handler(commands=['status'])

def cmd_status(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""

    status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if bot_running else "üî¥ –ù–µ –∑–∞–ø—É—â–µ–Ω"

    bot.send_message(m.chat.id, f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")



@bot.message_handler(commands=['help'])

def cmd_help(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""

    help_text = """

ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*



*–ö–æ–º–∞–Ω–¥—ã:*

/start - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏

/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É



*–¢–∏–ø—ã –∑–∞—è–≤–æ–∫:*

üì¶ –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π - –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

üîß –†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏



*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*

1. –ù–∞–∂–º–∏—Ç–µ /start

2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏

3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞

4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏

    """

    bot.send_message(m.chat.id, help_text, parse_mode='Markdown')



@bot.message_handler(commands=['admin'])

def cmd_admin(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    if m.chat.id != ADMIN_ID:

        bot.send_message(m.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.")

        return

    

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

    markup.add("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫", "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏")

    markup.add("üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", "üìù –õ–æ–≥–∏")

    markup.add("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")

    markup.add("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫")

    

    bot.send_message(m.chat.id, "üîß *–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 

                    reply_markup=markup, parse_mode='Markdown')



@bot.message_handler(commands=['stats'])

def cmd_stats(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""

    if m.chat.id != ADMIN_ID:

        return

    

    try:

        # –ß–∏—Ç–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫

        counter_file = "counter.txt"

        if os.path.exists(counter_file):

            with open(counter_file, "r") as f:

                total_requests = int(f.read())

        else:

            total_requests = 0

        

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        active_users = len(user_data)

        

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥ —Ñ–∞–π–ª–∞

        log_size = 0

        if os.path.exists('bot.log'):

            log_size = os.path.getsize('bot.log')

        

        stats_text = f"""

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*



üìà **–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:** {total_requests}

üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {active_users}

üìù **–†–∞–∑–º–µ—Ä –ª–æ–≥ —Ñ–∞–π–ª–∞:** {log_size} –±–∞–π—Ç

üïí **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üü¢ **–°—Ç–∞—Ç—É—Å:** {'–†–∞–±–æ—Ç–∞–µ—Ç' if bot_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

        """

        

        bot.send_message(m.chat.id, stats_text, parse_mode='Markdown')

        

    except Exception as e:

        bot.send_message(m.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")



@bot.message_handler(commands=['reset'])

def cmd_reset(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫"""

    if m.chat.id != ADMIN_ID:

        return

    

    try:

        counter_file = "counter.txt"

        if os.path.exists(counter_file):

            with open(counter_file, "w") as f:

                f.write("1")

            bot.send_message(m.chat.id, "‚úÖ –°—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ —Å–±—Ä–æ—à–µ–Ω. –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç REQ-0001")

        else:

            bot.send_message(m.chat.id, "‚ÑπÔ∏è –°—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω")

    except Exception as e:

        bot.send_message(m.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞: {e}")



@bot.message_handler(commands=['users'])

def cmd_users(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    if m.chat.id != ADMIN_ID:

        return

    

    if not user_data:

        bot.send_message(m.chat.id, "üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        return

    

    users_text = "üë• *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n"

    for chat_id, data in user_data.items():

        step = data.get('step', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        users_text += f"‚Ä¢ ID: {chat_id}\n  –®–∞–≥: {step}\n\n"

    

    bot.send_message(m.chat.id, users_text, parse_mode='Markdown')



@bot.message_handler(commands=['clear'])

def cmd_clear(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    if m.chat.id != ADMIN_ID:

        return

    

    global user_data

    count = len(user_data)

    user_data.clear()

    bot.send_message(m.chat.id, f"üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")



@bot.message_handler(commands=['logs'])

def cmd_logs(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""

    if m.chat.id != ADMIN_ID:

        return

    

    try:

        if os.path.exists('bot.log'):

            with open('bot.log', 'r', encoding='utf-8') as f:

                lines = f.readlines()

                last_lines = lines[-10:] if len(lines) > 10 else lines

                log_text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:*\n\n"

                for line in last_lines:

                    log_text += f"`{line.strip()}`\n"

                bot.send_message(m.chat.id, log_text, parse_mode='Markdown')

        else:

            bot.send_message(m.chat.id, "üìù –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:

        bot.send_message(m.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")



@bot.message_handler(commands=['requests'])

def cmd_requests(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /requests - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏"""

    if m.chat.id != ADMIN_ID:

        return

    

    try:

        if os.path.exists('requests.txt'):

            with open('requests.txt', 'r', encoding='utf-8') as f:

                content = f.read()

                if len(content) > 4000:  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è

                    content = content[-4000:] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)"

                

                requests_text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:*\n\n"

                requests_text += f"```\n{content}\n```"

                bot.send_message(m.chat.id, requests_text, parse_mode='Markdown')

        else:

            bot.send_message(m.chat.id, "üìã –§–∞–π–ª —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:

        bot.send_message(m.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")



@bot.message_handler(commands=['backup'])

def cmd_backup(m):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /backup - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""

    if m.chat.id != ADMIN_ID:

        return

    

    try:

        backup_data = {

            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),

            'total_requests': 0,

            'active_users': len(user_data),

            'bot_status': bot_running

        }

        

        # –ß–∏—Ç–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫

        counter_file = "counter.txt"

        if os.path.exists(counter_file):

            with open(counter_file, "r") as f:

                backup_data['total_requests'] = int(f.read())

        

        backup_text = f"""

üíæ *–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö*



üìÖ **–î–∞—Ç–∞:** {backup_data['timestamp']}

üìà **–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:** {backup_data['total_requests']}

üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {backup_data['active_users']}

üü¢ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** {'–†–∞–±–æ—Ç–∞–µ—Ç' if backup_data['bot_status'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

        """

        

        bot.send_message(m.chat.id, backup_text, parse_mode='Markdown')

        

    except Exception as e:

        bot.send_message(m.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")



@bot.message_handler(commands=['export'])

def cmd_export(m):

    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤ CSV (–∞–¥–º–∏–Ω)"""

    if m.chat.id != ADMIN_ID:

        return

    if os.path.exists('requests.csv'):

        with open('requests.csv', 'rb') as f:

            bot.send_document(m.chat.id, f, caption='–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ (CSV)')

    else:

        bot.send_message(m.chat.id, '–§–∞–π–ª requests.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.')



@bot.message_handler(commands=['export_excel'])

def cmd_export_excel(m):

    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤ Excel (–∞–¥–º–∏–Ω)"""

    if m.chat.id != ADMIN_ID:

        return

    if os.path.exists('requests.xlsx'):

        with open('requests.xlsx', 'rb') as f:

            bot.send_document(m.chat.id, f, caption='–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ (Excel)')

    else:

        bot.send_message(m.chat.id, '–§–∞–π–ª requests.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.')



@bot.message_handler(commands=['setstatus'])

def cmd_setstatus(m):

    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏: /setstatus REQ-0001 done"""

    if m.chat.id != ADMIN_ID:

        return

    try:

        parts = m.text.strip().split()

        if len(parts) != 3:

            bot.send_message(m.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setstatus REQ-0001 done')

            return

        _, req_id, new_status = parts

        if update_request_status(req_id, new_status):

            bot.send_message(m.chat.id, f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {req_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}')

            notify_user_about_status(req_id, new_status)

        else:

            bot.send_message(m.chat.id, f'–ó–∞—è–≤–∫–∞ {req_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

    except Exception as e:

        bot.send_message(m.chat.id, f'–û—à–∏–±–∫–∞: {e}')



@bot.message_handler(commands=['myrequests'])

def cmd_myrequests(m):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã —Å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É'"""

    user = m.from_user.username or m.from_user.full_name or str(m.from_user.id)

    found = []

    req_ids = []

    req_blocks = []

    if os.path.exists('requests.txt'):

        with open('requests.txt', 'r', encoding='utf-8') as f:

            lines = f.readlines()

        req = []

        req_id = None

        for line in lines:

            if line.startswith('‚úâÔ∏è'):

                req = [line]

                req_id = None

                if '–ó–∞—è–≤–∫–∞' in line:

                    req_id = line.split('–ó–∞—è–≤–∫–∞')[1].split('*')[0].strip()

            elif line.startswith('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:') and user in line:

                req.append(line)

                # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å

                status = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

                for l in req:

                    if l.startswith('–°—Ç–∞—Ç—É—Å:'):

                        status = l.split(':',1)[1].strip()

                found.append({'text': ''.join(req) + f'–°—Ç–∞—Ç—É—Å: {status}\n', 'req_id': req_id})

                req_blocks.append(list(req))

                req_ids.append(req_id)

            elif req:

                req.append(line)

    if found:

        for i, item in enumerate(found[-5:]):

            msg = f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n{item["text"]}'

            markup = InlineKeyboardMarkup()

            if item['req_id']:

                markup.add(InlineKeyboardButton('üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f'repeat_{item["req_id"]}'))

            bot.send_message(m.chat.id, msg, reply_markup=markup)

    else:

        bot.send_message(m.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.')



@bot.callback_query_handler(func=lambda call: call.data.startswith('repeat_'))

def handle_repeat_request(call: CallbackQuery):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ"""

    req_id = call.data.split('_',1)[1]

    # –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –ø–æ req_id

    if os.path.exists('requests.txt'):

        with open('requests.txt', 'r', encoding='utf-8') as f:

            lines = f.readlines()

        req = []

        found = False

        for line in lines:

            if req_id in line:

                found = True

                req = [line]

            elif found and line.startswith('‚úâÔ∏è'):

                break

            elif found:

                req.append(line)

        # –ü–∞—Ä—Å–∏–º –ø–æ–ª—è

        data = {}

        for l in req:

            if l.startswith('–¢–∏–ø:'):

                data['type'] = l.split(':',1)[1].strip()

            elif l.startswith('–ö–∞—Ä—Ç—Ä–∏–¥–∂:'):

                data['cartridge'] = l.split(':',1)[1].strip()

            elif l.startswith('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:'):

                data['quantity'] = l.split(':',1)[1].strip()

            elif l.startswith('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:'):

                data['equipment'] = l.split(':',1)[1].strip()

            elif l.startswith('–ü—Ä–æ–±–ª–µ–º–∞:'):

                data['problem'] = l.split(':',1)[1].strip()

            elif l.startswith('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:'):

                data['branch'] = l.split(':',1)[1].strip()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ñ–ª–æ—É —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏

        chat_id = call.message.chat.id

        user_data[chat_id] = {}

        if data.get('type') == 'üì¶ –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π':

            user_data[chat_id]['type'] = data['type']

            user_data[chat_id]['cartridge'] = data.get('cartridge','')

            user_data[chat_id]['quantity'] = data.get('quantity','')

            start_flow(chat_id)

            if data.get('cartridge'):

                ask_cartridge_inline(chat_id)

            if data.get('quantity'):

                ask_quantity_inline(chat_id)

        elif data.get('type') == 'üîß –†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è':

            user_data[chat_id]['type'] = data['type']

            user_data[chat_id]['equipment'] = data.get('equipment','')

            user_data[chat_id]['problem'] = data.get('problem','')

            start_flow(chat_id)

            if data.get('equipment'):

                ask_equipment_inline(chat_id)

            if data.get('problem'):

                ask_problem_inline(chat_id)

        # –ï—Å–ª–∏ –µ—Å—Ç—å branch, —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º

        if data.get('branch'):

            user_data[chat_id]['branch'] = data['branch']

            finalize_request(chat_id)

        bot.answer_callback_query(call.id, '–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã! –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è.')



@bot.message_handler(func=lambda m: True)

def main_handler(m):

    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    chat_id = m.chat.id

    text = m.text

    

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

    if chat_id == ADMIN_ID:

        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":

            cmd_stats(m)

            return

        elif text == "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":

            cmd_users(m)

            return

        elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫":

            cmd_reset(m)

            return

        elif text == "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏":

            cmd_requests(m)

            return

        elif text == "üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è":

            cmd_backup(m)

            return

        elif text == "üìù –õ–æ–≥–∏":

            cmd_logs(m)

            return

        elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":

            cmd_clear(m)

            return

        elif text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é":

            markup = types.ReplyKeyboardRemove()

            bot.send_message(chat_id, "üîß –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–æ", reply_markup=markup)

            return

        elif text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫":

            export_format_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

            export_format_markup.add("Excel (.xlsx)", "CSV (.csv)")

            export_format_markup.add("‚ùå –û—Ç–º–µ–Ω–∞")

            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=export_format_markup)

            user_data[chat_id]["step"] = "export_format"

            return

        elif text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel":

            cmd_export_excel(m)

            start_flow(chat_id)

            return

        elif text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":

            bot.send_message(chat_id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setstatus REQ-0001 done')

            return

    

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":

        start_flow(chat_id)

        return

    

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏

    if chat_id not in user_data or "step" not in user_data[chat_id]:

        start_flow(chat_id)

        return

    

    step = user_data[chat_id]["step"]

    

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞

    if step == "start":

        if text == "üì¶ –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π":

            user_data[chat_id]["type"] = text

            ask_cartridge_inline(chat_id)

        elif text == "üîß –†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è":

            user_data[chat_id]["type"] = text

            ask_equipment_inline(chat_id)

        else:

            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∫–Ω–æ–ø–∫–æ–π.")

            show_type_selection(chat_id, include_welcome=False)

    

    elif step == "cartridge":

        if text in CARTRIDGES:

            user_data[chat_id]["cartridge"] = text

            ask_quantity_inline(chat_id)

        else:

            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂ –∫–Ω–æ–ø–∫–æ–π.")

            ask_cartridge_inline(chat_id)

    

    elif step == "quantity":

        if text in QUANTITIES:

            user_data[chat_id]["quantity"] = text

            ask_city_inline(chat_id)

        else:

            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–∫–æ–π.")

            ask_quantity_inline(chat_id)

    

    elif step == "equipment":

        if text in EQUIP_PROBLEMS:

            user_data[chat_id]["equipment"] = text

            ask_problem_inline(chat_id)

        else:

            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π.")

            ask_equipment_inline(chat_id)

    

    elif step == "problem":

        if text == "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞":

            ask_custom_problem_inline(chat_id)

        elif text in EQUIP_PROBLEMS.get(user_data[chat_id]['equipment'], []):

            user_data[chat_id]["problem"] = text

            ask_city_inline(chat_id)

        else:

            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∫–Ω–æ–ø–∫–æ–π.")

            ask_problem_inline(chat_id)

    

    elif step == "custom_problem":

        user_data[chat_id]["problem"] = text

        ask_city_inline(chat_id)

    

    elif step == "city":

        if text in CITIES:

            if CITIES[text]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

                user_data[chat_id]["city"] = text

                ask_subbranch(chat_id, text)

            else:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π

                user_data[chat_id]["branch"] = text

                finalize_request(chat_id)

        else:

            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–Ω–æ–ø–∫–æ–π.")

            ask_city_inline(chat_id)

    

    elif step == "subbranch":

        if text in sum(CITIES.values(), []):

            user_data[chat_id]["branch"] = text

            finalize_request(chat_id)

        else:

            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π.")

            ask_subbranch(chat_id, user_data[chat_id]["city"])

    

    elif step == "export_format":

        if text == "Excel (.xlsx)":

            cmd_export_excel(m)

            start_flow(chat_id)

            return

        elif text == "CSV (.csv)":

            cmd_export(m)

            start_flow(chat_id)

            return

        else:

            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–æ–π.")

            return

    

    else:

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ

        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")

        start_flow(chat_id)



def run_bot():

    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    global bot_running

    bot_running = True

    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    

    try:

        bot.infinity_polling(timeout=60, long_polling_timeout=30, logger_level=logging.INFO)

    except KeyboardInterrupt:

        bot_running = False

        print("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    except Exception as e:

        bot_running = False

        print(f"‚ùó –û—à–∏–±–∫–∞ polling: {e}")

        logging.error(f"–û—à–∏–±–∫–∞ polling: {e}")

    finally:

        bot_running = False

        print("‚ÑπÔ∏è –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

        logging.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")



if __name__ == '__main__':

    run_bot() 
