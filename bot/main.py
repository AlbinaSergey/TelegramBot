#!/usr/bin/env python3
"""
Main Telegram bot for HelpDesk Ecosystem
Cartridge management system
"""

import asyncio
import logging
import os
from datetime import datetime
from typing import Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# Import our database utilities
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from database.db_utils import (
    user_manager, branch_manager, cartridge_manager, 
    request_manager, log_manager, generate_request_code
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = os.getenv('BOT_TOKEN', 'your_bot_token_here')
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]

# FSM States
class RequestStates(StatesGroup):
    """States for request creation flow"""
    selecting_branch = State()
    selecting_priority = State()
    selecting_cartridges = State()
    entering_quantity = State()
    adding_comment = State()
    confirming_request = State()

class BotManager:
    """Main bot manager class"""
    
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup all bot handlers"""
        
        # Command handlers
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_new_request, Command("new"))
        self.dp.message.register(self.cmd_my_requests, Command("my"))
        
        # Admin commands
        self.dp.message.register(self.cmd_admin, Command("admin"))
        self.dp.message.register(self.cmd_stats, Command("stats"))
        
        # Callback handlers
        self.dp.callback_query.register(self.handle_branch_selection)
        self.dp.callback_query.register(self.handle_priority_selection)
        self.dp.callback_query.register(self.handle_cartridge_selection)
        self.dp.callback_query.register(self.handle_confirm_request)
        
        # Message handlers
        self.dp.message.register(self.handle_quantity_input, RequestStates.entering_quantity)
        self.dp.message.register(self.handle_comment_input, RequestStates.adding_comment)
    
    async def cmd_start(self, message: types.Message):
        """Handle /start command"""
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        
        # Check if user exists, create if not
        user = user_manager.get_user_by_telegram_id(user_id)
        if not user:
            user_manager.create_user(user_id, username)
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–∫–∞–∑–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π!\n"
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."
            )
        else:
            await message.answer(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}!\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∏."
            )
    
    async def cmd_help(self, message: types.Message):
        """Handle /help command"""
        help_text = """
ü§ñ **–°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/new` - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
‚Ä¢ `/my` - –ú–æ–∏ –∑–∞—è–≤–∫–∏
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª
2. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
4. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É

**–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:**
‚Ä¢ üÜï –ù–æ–≤—ã–π
‚Ä¢ ‚è≥ –í —Ä–∞–±–æ—Ç–µ
‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
‚Ä¢ ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ
‚Ä¢ üìÅ –ê—Ä—Ö–∏–≤

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await message.answer(help_text, parse_mode="Markdown")
    
    async def cmd_new_request(self, message: types.Message):
        """Start new request creation"""
        user_id = message.from_user.id
        
        # Check if user exists
        user = user_manager.get_user_by_telegram_id(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # Get branches for selection
        branches = branch_manager.get_all_branches()
        if not branches:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤.")
            return
        
        # Create branch selection keyboard
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{branch['name']} ({branch['code']})", 
                                callback_data=f"branch:{branch['id']}")]
            for branch in branches
        ])
        
        await message.answer(
            "üè¢ **–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await RequestStates.selecting_branch.set()
    
    async def handle_branch_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """Handle branch selection"""
        branch_id = int(callback.data.split(':')[1])
        
        # Store branch_id in state
        await state.update_data(branch_id=branch_id)
        
        # Create priority selection keyboard
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π", callback_data="priority:low")],
            [InlineKeyboardButton(text="üü° –û–±—ã—á–Ω—ã–π", callback_data="priority:normal")],
            [InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority:high")]
        ])
        
        await callback.message.edit_text(
            "‚ö° **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏:**\n\n"
            "üü¢ –ù–∏–∑–∫–∏–π - –æ–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞\n"
            "üü° –û–±—ã—á–Ω—ã–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
            "üî¥ –í—ã—Å–æ–∫–∏–π - —Å—Ä–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await RequestStates.selecting_priority.set()
        await callback.answer()
    
    async def handle_priority_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """Handle priority selection"""
        priority = callback.data.split(':')[1]
        
        # Store priority in state
        await state.update_data(priority=priority)
        
        # Get cartridges for selection
        cartridges = cartridge_manager.get_all_cartridge_types()
        if not cartridges:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π.")
            return
        
        # Create cartridge selection keyboard (first 10)
        keyboard_buttons = []
        for cartridge in cartridges[:10]:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{cartridge['name']} ({cartridge['sku']})", 
                    callback_data=f"cartridge:{cartridge['id']}"
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "üñ®Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂:**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await RequestStates.selecting_cartridges.set()
        await callback.answer()
    
    async def handle_cartridge_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """Handle cartridge selection"""
        cartridge_id = int(callback.data.split(':')[1])
        
        # Store cartridge_id in state
        await state.update_data(cartridge_id=cartridge_id)
        
        await callback.message.edit_text(
            "üî¢ **–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:**\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            parse_mode="Markdown"
        )
        await RequestStates.entering_quantity.set()
        await callback.answer()
    
    async def handle_quantity_input(self, message: types.Message, state: FSMContext):
        """Handle quantity input"""
        try:
            quantity = int(message.text)
            if quantity <= 0:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return
            
            # Store quantity in state
            await state.update_data(quantity=quantity)
            
            await message.answer(
                "üí¨ **–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
                parse_mode="Markdown"
            )
            await RequestStates.adding_comment.set()
            
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    
    async def handle_comment_input(self, message: types.Message, state: FSMContext):
        """Handle comment input"""
        comment = message.text if message.text != '-' else None
        
        # Store comment in state
        await state.update_data(comment=comment)
        
        # Get all data from state
        data = await state.get_data()
        
        # Get additional info for confirmation
        branch = branch_manager.get_all_branches()
        branch = next((b for b in branch if b['id'] == data['branch_id']), None)
        
        cartridge = cartridge_manager.get_all_cartridge_types()
        cartridge = next((c for c in cartridge if c['id'] == data['cartridge_id']), None)
        
        if not branch or not cartridge:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
            return
        
        # Create confirmation message
        priority_emoji = {
            'low': 'üü¢',
            'normal': 'üü°', 
            'high': 'üî¥'
        }
        
        confirmation_text = f"""
üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:**

üè¢ **–§–∏–ª–∏–∞–ª:** {branch['name']} ({branch['code']})
‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority_emoji[data['priority']]} {data['priority'].title()}
üñ®Ô∏è **–ö–∞—Ä—Ç—Ä–∏–¥–∂:** {cartridge['name']} ({cartridge['sku']})
üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {data['quantity']} —à—Ç.
üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {comment or '–ù–µ —É–∫–∞–∑–∞–Ω'}

–í—Å—ë –≤–µ—Ä–Ω–æ?
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:no")]
        ])
        
        await message.answer(confirmation_text, reply_markup=keyboard, parse_mode="Markdown")
        await RequestStates.confirming_request.set()
    
    async def handle_confirm_request(self, callback: types.CallbackQuery, state: FSMContext):
        """Handle request confirmation"""
        if callback.data == "confirm:no":
            await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await state.clear()
            await callback.answer()
            return
        
        # Get data from state
        data = await state.get_data()
        user_id = callback.from_user.id
        
        try:
            # Generate request code
            request_code = generate_request_code()
            
            # Create request
            request_id = request_manager.create_request(
                request_code=request_code,
                branch_id=data['branch_id'],
                user_id=user_id,
                priority=data['priority'],
                comment=data['comment']
            )
            
            # Add request items
            request_manager.add_request_items(
                request_id=request_id,
                items=[(data['cartridge_id'], data['quantity'])]
            )
            
            # Log the creation
            log_manager.add_log(
                request_id=request_id,
                user_id=user_id,
                action='created',
                note='–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞'
            )
            
            # Success message
            success_text = f"""
‚úÖ **–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**

üìã **–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:** `{request_code}`
üè¢ **–§–∏–ª–∏–∞–ª:** {data.get('branch_name', 'N/A')}
‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {data['priority'].title()}
üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫.
            """
            
            await callback.message.edit_text(success_text, parse_mode="Markdown")
            
            # Notify admins about new request
            await self.notify_admins_new_request(request_code, data)
            
        except Exception as e:
            logger.error(f"Error creating request: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.clear()
        await callback.answer()
    
    async def cmd_my_requests(self, message: types.Message):
        """Show user's requests"""
        user_id = message.from_user.id
        
        # Get user
        user = user_manager.get_user_by_telegram_id(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Get user's requests
        requests = request_manager.get_user_requests(user['id'], limit=5)
        
        if not requests:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        
        # Format requests
        requests_text = "üìã **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:**\n\n"
        
        for req in requests:
            status_emoji = {
                'new': 'üÜï',
                'in_progress': '‚è≥',
                'done': '‚úÖ',
                'cancelled': '‚ùå',
                'archived': 'üìÅ'
            }
            
            requests_text += f"""
{status_emoji.get(req['status'], '‚ùì')} **{req['request_code']}**
üè¢ {req['branch_name']} ({req['branch_code']})
‚ö° {req['priority'].title()}
üìÖ {req['created_at'][:10]}
üìä –°—Ç–∞—Ç—É—Å: {req['status'].replace('_', ' ').title()}
            """
        
        await message.answer(requests_text, parse_mode="Markdown")
    
    async def cmd_admin(self, message: types.Message):
        """Admin panel"""
        user_id = message.from_user.id
        
        if user_id not in ADMIN_IDS:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        # Admin panel logic here
        await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    async def cmd_stats(self, message: types.Message):
        """Show statistics"""
        user_id = message.from_user.id
        
        if user_id not in ADMIN_IDS:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        # Get basic stats
        stats = self.get_basic_stats()
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats['users']}
üè¢ **–§–∏–ª–∏–∞–ª—ã:** {stats['branches']}
üñ®Ô∏è **–¢–∏–ø—ã –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π:** {stats['cartridges']}
üìã **–ó–∞—è–≤–∫–∏:** {stats['requests']}
üÜï **–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:** {stats['new_requests']}
‚è≥ **–í —Ä–∞–±–æ—Ç–µ:** {stats['in_progress']}
‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** {stats['completed']}
        """
        
        await message.answer(stats_text, parse_mode="Markdown")
    
    def get_basic_stats(self) -> Dict[str, int]:
        """Get basic system statistics"""
        # This would be implemented with actual database queries
        return {
            'users': 0,
            'branches': 0,
            'cartridges': 0,
            'requests': 0,
            'new_requests': 0,
            'in_progress': 0,
            'completed': 0
        }
    
    async def notify_admins_new_request(self, request_code: str, data: Dict[str, Any]):
        """Notify admins about new request"""
        if not ADMIN_IDS:
            return
        
        notification_text = f"""
üÜï **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!**

üìã **–ù–æ–º–µ—Ä:** `{request_code}`
üè¢ **–§–∏–ª–∏–∞–ª:** {data.get('branch_name', 'N/A')}
‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {data['priority'].title()}
üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        for admin_id in ADMIN_IDS:
            try:
                await self.bot.send_message(admin_id, notification_text, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")
    
    async def start(self):
        """Start the bot"""
        logger.info("Starting bot...")
        await self.dp.start_polling(self.bot)

async def main():
    """Main function"""
    bot_manager = BotManager()
    await bot_manager.start()

if __name__ == "__main__":
    asyncio.run(main())